Sequence Diagram

Models the sequential logic, in effect the time ordering of messages between classifiers.
It shows how the objects interact with others in a particular scenario of a use case.

Can be used for:

1. To detect bottlenecks within an object-oriented design. 
2. Give you a feel for which classes in your application are going to be complex, 
which in turn is an indication that you may need to draw state chart diagrams for those classes. 
3. Explore your design because they provide a way for you to visually step through invocation
of the operations defined by your classes.

Sequence diagrams, along with class diagrams and physical data models are probably the most 
important design-level models for modern business application development. 

An organization's technical staff can find sequence diagrams useful in documenting how a 
future system should behave.

The focus is less on messages themselves and more on the order in which messages occur;
nevertheless, most sequence diagrams will communicate what messages are sent between 
a system's objects as well as the order in which they occur.

Some of the basics include:

1. Lifelines - represent either roles or object instances that participate in the sequence being modeled.
2. Messages - The first message of a sequence diagram always starts at the top and is typically located 
on the left side of the diagram for readability. To show an object sending a message to another object, 
you draw a line to the receiving object with a solid arrowhead. 
3. Guards - Guards are used throughout UML diagrams to control flow.
4. Combined fragments (alternatives, options, and loops) - A combined fragment is used to group sets 
of messages together to show conditional flow in a sequence diagram.
5. Alternatives - are used to designate a mutually exclusive choice between two or more message sequences.
6. Option - The option combination fragment is used to model a sequence that, given a certain condition,
will occur; otherwise, the sequence does not occur. An option is used to model a simple "if then" statement 
7. Loops - model a repetitive sequence


Sources:
http://www.visual-paradigm.com/VPGallery/diagrams/Sequence.html
http://www.agilemodeling.com/artifacts/sequenceDiagram.htm
http://www.ibm.com/developerworks/rational/library/3101.html




