Threads, Executors, Runnables, Android Handlers

***Threads***
Multithreading refers to two or more tasks executing concurrently within 
a single program. A thread is an independent path of execution within a 
program. Many threads can run concurrently within a program. Every thread 
in Java is created and controlled by the java.lang.Thread class. A Java 
program can have many threads, and these threads can run concurrently, 
either asynchronously or synchronously.

- Threads are lightweight compared to processes
- Threads share the same address space and therefore can share both data and code
- Threads allow different tasks to be performed concurrently.

There are two ways to create thread in java:
- Implement the Runnable interface (java.lang.Runnable)
- By Extending the Thread class (java.lang.Thread)

We can create Threads by either implementing Runnable interface of by 
extending Thread Class.

Thread t = new Thread(new Runnable(){
    @Override
    public void run() {
    }
});



***Executors***
Executors are capable of running asynchronous tasks and typically manage a 
pool of threads, so we don't have to create new threads manually. 

Example of using executors:
ExecutorService executor = Executors.newSingleThreadExecutor();
executor.submit(() -> {
    String threadName = Thread.currentThread().getName();
    System.out.println("Hello " + threadName);
});

The class Executors provides convenient factory methods for creating 
different kinds of executor services.


There are a few different ways to delegate tasks for execution to an ExecutorService:

execute(Runnable)
submit(Runnable)
submit(Callable)
invokeAny(...)
invokeAll(...)

The execute(Runnable) method takes a java.lang.Runnable object, and executes it asynchronously. 
ExecutorService executorService = Executors.newSingleThreadExecutor();

executorService.execute(new Runnable() {
    public void run() {
        System.out.println("Asynchronous task");
    }
});

executorService.shutdown();



***Runnables***

Runnables are NOT Threads. The Runnable interface is used to define a certain task 
that we want to execute, and the whole implementation of this task is inside its 
only method, run() (which accepts no arguments). The Runnable class by itself does
not create a separate thread, because this is what Thread actually does.
Runnable represent a task in Java which is executed by Thread. java.lang.Runnable 
is an interface and defines only one method called run().

Why use Runnable?
 - Modularity
 - Ease of use. Runnable only has one method, public void run(). It accepts no 
   arguments and is as simple as possible.
 - Inheritance

***Handlers***
Allows send messages between two threads in a safe manner, that means 
that sending thread puts message into destination thread queue, and 
this destination queue will process this message in its appropriate time.

Each Handler instance is associated with a single thread and that thread’s message queue. 
When you create a new Handler, it is bound to the thread / message queue of the thread 
that is creating it — from that point on, it will deliver messages and runnables to that 
message queue and execute them as they come out of the message queue.

There are two main uses for a Handler:
 - To schedule messages and runnables to be executed as some point in the future.
 - To enqueue an action to be performed on a different thread than your own.